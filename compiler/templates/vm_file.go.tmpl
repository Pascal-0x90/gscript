package main

import (
  "bytes"
	"compress/gzip"
  "crypto/aes"
  "crypto/cipher"
	"encoding/base64"
  "fmt"
	"io"

  "github.com/Pascal-0x90/gscript/engine"
  "github.com/robertkrimen/otto"
  {{ if $.HasDebuggingEnabled -}}
    "github.com/Pascal-0x90/gscript/debugger"
  {{- end }}
  {{ if $.HasLoggingEnabled -}}
    "github.com/Pascal-0x90/gscript/logger/standard"
  {{- end }}

  // Importing masks
  {{ range $ip, $mi := $.Linker.MaskedImports }}
    {{ $mi.NewAlias }} "{{ $ip }}"
  {{ end }}
)

var (
  {{- range $_, $embed := $.Embeds }}
    // {{ $embed.ID }} holds the data for embedded file {{ $embed.OrigName }}
    {{ $embed.ID }} = "{{ $embed.Data }}"

  {{- end }}
)

// {{ $.ID }} wraps the genesis VM for {{ $.Name }}
type {{ $.ID }} struct {
  E *engine.Engine
  K []byte
  {{ if $.HasDebuggingEnabled -}}
    D *debugger.Debugger
  {{- end }}
}

// New{{ $.ID }} creates the genesis runtime for script {{ $.Name }}
func New{{ $.ID }}() *{{ $.ID }} {
  te := engine.New("{{ $.Name }}", "{{ $.ID }}", {{ $.GetTimeout }}, "Execute")
  {{ if $.HasLoggingEnabled -}}
    al := standard.NewStandardLogger(nil, "engine", "{{ $.Name }}", false, false)
    te.SetLogger(al)
  {{- end }}
  {{ if $.HasDebuggingEnabled }}
    de := debugger.New(te)
  {{ end }}
  o := &{{ $.ID }}{
    E: te,
    {{ if $.HasDebuggingEnabled -}}
      D: de,
    {{- end }}
  }
  return o
}

// {{ $.FunctionKey "import_assets" }} imports assets into the genesis runtime for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "import_assets" }}() error {
  {{ range $eid, $embed := $.Embeds -}}
    // {{ $eid }} = {{ $embed.OrigName }}
    o.E.Imports["{{ $eid }}"] = func() []byte {
      // Unpacker wrapper with const declared above
      return {{ $.ID }}D({{ $embed.ID }}, {{ $embed.ID }}ODK())
    }
  {{ end -}}
  return nil
}

// {{ $.FunctionKey "preload" }} imports the runtime preload library for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "preload" }}() error {
  return o.E.LoadScript("preload.gs", o.E.Imports["__PRELOAD"]())
}

// {{ $.FunctionKey "import_script" }} loads the script {{ $.Name }} into the genesis VM
func (o *{{ $.ID }}) {{ $.FunctionKey "import_script" }}() error {
  return o.E.LoadScript("{{ $.Name }}", o.E.Imports["__ENTRYPOINT"]())
}

// {{ $.FunctionKey "execute" }} executes the genesis VM at the entry point (defined by version, usually Deploy())
func (o *{{ $.ID }}) {{ $.FunctionKey "execute" }}() error {
  {{ if $.HasDebuggingEnabled -}}
    o.D.InjectDebugConsole()
  {{- end }}
  o.E.EnableAssets()
  _, err := o.E.CallFunctionWithTimeout("Deploy")
  if err != nil {
    panic(err)
  }
  return err
}

// {{ $.FunctionKey "import_native" }} injects the dynamically linked native functions into the genesis VM for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "import_native" }}() error {
  var err error
  err = nil

  // -- BEGIN NATIVE PACKAGE IMPORTS
  {{ range $ns, $pkg := $.GoPackageByNamespace -}}
    // Importing {{ $pkg.ImportPath }} under namespace {{ $pkg.MaskedName }} (originally was {{ $ns }})
    _np{{ $pkg.MaskedName }} := &engine.NativePackage{
      ImportPath: "{{ $pkg.ImportPath }}",
      Name: "{{ $pkg.Name }}",
      SymbolTable: map[string]*engine.NativeFunc{},
      Types: map[string]*engine.NativeType{},
      Consts: map[string]*engine.NativeConst{},
      Vars: map[string]*engine.NativeVar{},
    }
    {{ range $fidx, $f := $pkg.SuccessfullyLinkedFuncs -}}
      // Adding function pointer for native function {{ $pkg.Name }}.{{ $f.Function }} to symbol table
      _nf{{ $pkg.MaskedName }}{{ $fidx }} := &engine.NativeFunc{
        Name: "{{ $f.Function }}",
        Signature: "{{ $f.Signature }}",
        Func: o.{{ $.ID }}{{ $f.ID }},
      }
      _np{{ $pkg.MaskedName }}.SymbolTable["{{ $f.Function }}"] = _nf{{ $pkg.MaskedName }}{{ $fidx }}
    {{ end -}}
    {{ range $_, $t := $pkg.GoTypes -}}
      // Declaring a type alias for {{ $pkg.Name }}.{{ $t.Name }}
      _nt{{ $pkg.MaskedName }}{{ $t.Key }} := &engine.NativeType{
        Name: "{{ $t.Name }}",
        Factory: o.{{ $.ID }}{{ $t.Key }},
        Fields: map[string]*engine.NativeField{},
      }
      _np{{ $pkg.MaskedName }}.Types["{{ $t.Name }}"] = _nt{{ $pkg.MaskedName }}{{ $t.Key }}
    {{ end -}}
    {{ range $cidx, $c := $pkg.GoConsts -}}
      _nc{{ $pkg.MaskedName }}{{ $c.Key }} := &engine.NativeConst{
        Name: "{{ $c.Name }}",
        Value: {{ $pkg.MaskedName }}.{{ $c.Name }},
      }
      _np{{ $pkg.MaskedName }}.Consts["{{ $cidx }}"] = _nc{{ $pkg.MaskedName }}{{ $c.Key }}
    {{ end -}}
    {{ range $vidx, $va := $pkg.ValidVars -}}
      _nv{{ $pkg.MaskedName }}{{ $va.Key }} := &engine.NativeVar{
        Name: "{{ $va.Name }}",
        Signature: `{{ $va.Signature }}`,
        Value: {{ $pkg.MaskedName }}.{{ $va.Name }},
      }
      _np{{ $pkg.MaskedName }}.Vars["{{ $va.Name }}"] = _nv{{ $pkg.MaskedName }}{{ $va.Key }}
    {{ end -}}

    // Injecting native package into the genesis VM
    err = o.E.ImportNativePackage("{{ $ns }}", _np{{ $pkg.MaskedName }})
    if err != nil {
      return err
    }

    // --

  {{ end -}}
  // -- END NATIVE PACKAGE IMPORTS
  return err
}

// {{ $.FunctionKey "import_standard_library" }} injects the dynamically linked standard library functions into the genesis VM for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "import_standard_library" }}() error {
  var err error
  err = nil
  ntp := []*engine.NativePackage{}

  // -- BEGIN NATIVE PACKAGE IMPORTS
  {{ range $ns, $pkg := $.EnabledStandardLibs -}}
    // Importing Standard Library Package: {{ $ns }}
    _np{{ $pkg.MaskedName }} := &engine.NativePackage{
      ImportPath: "{{ $pkg.ImportPath }}",
      Name: "{{ $ns }}",
      SymbolTable: map[string]*engine.NativeFunc{},
    }

    {{ range $fidx, $f := $pkg.SuccessfullyLinkedFuncs -}}
      // Adding function pointer for native function {{ $pkg.Name }}.{{ $f.Function }} to symbol table
      _nf{{ $pkg.MaskedName }}{{ $fidx }} := &engine.NativeFunc{
        Name: "{{ $f.Function }}",
        Signature: "{{ $f.Signature }}",
        Func: o.{{ $.ID }}{{ $f.ID }},
      }
      _np{{ $pkg.MaskedName }}.SymbolTable["{{ $f.Function }}"] = _nf{{ $pkg.MaskedName }}{{ $fidx }}

    {{ end -}}
    ntp = append(ntp, _np{{ $pkg.MaskedName }})
  {{ end -}}

  // Injecting standard library into the genesis VM
  err = o.E.ImportStandardLibrary(ntp)
  if err != nil {
    return err
  }
  return nil
}

{{ range $_, $embed := $.Embeds -}}
  // {{ $embed.ID }}ODK returns the decryption key for the {{ $embed.ID }} asset
  func {{ $embed.ID }}ODK() []byte {
    return {{ $embed.ID }}ODRD
  }

  // {{ $embed.ID }}ODRD contains the decryption key for the encrypted {{ $embed.ID }} asset
  var {{ $embed.ID }}ODRD = []byte{
    {{- range $idx, $b := $embed.EncryptionKey -}}
      {{- if mod $idx 7 -}}
        {{ printf "\n\t" }}
      {{- end -}}
      {{ printf "0x%x, " $b -}}
    {{ end }}
  }
{{ end -}}

// {{ $.ID }}D is the decoding function for embedded assets for script {{ $.Name }}
func {{ $.ID }}D(s string, k []byte) []byte {
  b, err := aes.NewCipher(k)
  if err != nil {
    return []byte{}
  }
  db1 := new(bytes.Buffer)
  db2 := new(bytes.Buffer)
	src := bytes.NewReader([]byte(s))
  var iv [aes.BlockSize]byte
  stream := cipher.NewOFB(b, iv[:])
	decoder := base64.NewDecoder(base64.StdEncoding, src)
  encReader := &cipher.StreamReader{S: stream, R: decoder}
  if _, err := io.Copy(db1, encReader); err != nil {
    return []byte{}
  }
	gzr, err := gzip.NewReader(db1)
	if err != nil {
		return []byte{}
	}
	_, err = io.Copy(db2, gzr)
	if err != nil {
		return []byte{}
	}
	gzr.Close()
	return db2.Bytes()
}

// Declaring Dynamically Linked Function Wrappers
{{ range $_, $f := $.Linker.SuccessfullyLinkedFuncs }}

// {{ $.ID }}{{ $f.ID }} is the linker function for {{ $f.GoPackage.Name }}.{{ $f.Function }}
func (o *{{ $.ID }}) {{ $.ID }}{{ $f.ID }}(call otto.FunctionCall) otto.Value {
  // Argument Sanity Checks
  if len(call.ArgumentList) > {{ len $f.GoArgs }} {
    return o.E.Raise("argument", "too many arguments passed to function %s", "{{ $f.Function }}")
  }
  if len(call.ArgumentList) < {{ len $f.GoArgs }} {
    return o.E.Raise("argument", "too few arguments passed to function %s", "{{ $f.Function }}")
  }

  {{ range $aidx, $a := $f.GoArgs -}}
    // Native Function Argument #{{ $aidx }}
    var a{{ $aidx }} {{ $a.ExtSig }}
    ra{{ $aidx }}, err := call.Argument({{ $aidx }}).Export()
    if err != nil {
      return o.E.Raise("jsexport", "could not export argument %d of function %s", {{ $aidx }}, "{{ $f.Function }}")
    }
    switch v := ra{{ $aidx }}.(type) {
    {{ if eq $a.ExtSig "[]interface{}" }}
      case []string:
        ifs := []interface{}{}
        for _, x := range v {
          ifs = append(ifs, x)
        }
        a{{ $aidx }} = ifs
    {{ end }}
    {{ if $a.NeedsMapping }}
      case {{ $a.MappedTypeAlias }}:
        a{{ $aidx }} = {{ $a.ExtSig }}(v)
    {{ end }}
    case {{ $a.ExtSig }}:
      a{{ $aidx }} = ra{{ $aidx }}.({{ $a.ExtSig }})
    {{ if $a.BuiltInTranslationRequired }}
      case {{ $a.BuiltInJSType }}:
        a{{ $aidx }} = {{ $a.ExtSig }}(v)
    {{ end }}
    default:
      return o.E.Raise("type conversion", "argument type mismatch - expected %s, got %T", "{{ $a.ExtSig }}", v)
    }
  {{ end }}

  {{ range $ridx , $r := $f.GoReturns -}}
    // Native Function Return #{{ $ridx }}
    var r{{ $ridx }} {{ $r.ExtSig }}
  {{ end -}}
  {{ $retLen := len $f.GoReturns }}
  {{ if gt $retLen 0 }}
    // Call the native function
    {{ $f.GenerateReturnString "r" }} = {{ $f.GoPackage.MaskedName }}.{{ $f.Function }}({{ $f.GenerateArgString "a" }})
    {{ if eq $retLen 1 }}
      // Single return context - attempt to return that to VM
      retVal, err := call.Otto.ToValue(r0)
      if err != nil {
        return o.E.Raise("return", "conversion failed for return 0 (type=%T) - %v", r0, err)
      }
      return retVal
    {{ else }}
      // This function has multiple returns - injecting into a JS array for single return context compatibility
      jsObj, err := call.Otto.Object(`[]`)
      if err != nil {
        return o.E.Raise("runtime", "could not create multiple assignment structure - %v", err)
      }

      {{ range $ridx, $_ := $f.GoReturns -}}
        // Return Value #{{ $ridx }}
        err = jsObj.Set("{{ $ridx }}", r{{ $ridx }})
        if err != nil {
          return o.E.Raise("return", "conversion failed for return %d (type=%T) - %v", {{ $ridx }}, r{{ $ridx }}, err)
        }
      {{ end }}
      // Return the generated object
      return jsObj.Value()
    {{ end -}}
  {{ else }}
    // This function has no returns, call the function and return undefined.
    {{ $f.GoPackage.MaskedName }}.{{ $f.Function }}({{ $f.GenerateArgString "a" }})
    return otto.UndefinedValue()
  {{ end -}}
}

{{ end }}

{{ range $ns, $pkg := $.GoPackageByNamespace -}}
{{ range $tn, $t := $pkg.GoTypes -}}
// {{ $.ID }}{{ $t.Key }} declares an accessible native type generator for {{ $pkg.Name }}.{{ $tn }}
func (o *{{ $.ID }}) {{ $.ID }}{{ $t.Key }}(call otto.FunctionCall) otto.Value {
  val := new({{ $pkg.MaskedName }}.{{ $tn }})
  retVal, err := call.Otto.ToValue(val)
  if err != nil {
    return o.E.Raise("return", "conversion failed for return 0 (type=%T) - %v", val, err)
  }
  return retVal
}

{{ end -}}
{{ end -}}
// Tangled Hairs below
// ---