// Code generated for package computil by go-bindata DO NOT EDIT. (@generated)
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xef\x8f\xda\x46\x10\xfd\xee\xbf\xe2\xd5\x22\x92\xad\x80\x49\xf3\x31\x2d\x1f\xee\x94\x4b\x8a\x72\x49\xaf\xe1\x2e\x55\x15\xa5\x68\xb1\x07\xdf\x16\xdf\xae\x99\x5d\xdb\x20\xc4\xff\x5e\xad\x7f\xa4\x18\x5d\xdb\x6b\x45\xe0\x0b\xde\xf1\xec\x9b\x79\xef\x2d\x3b\xe4\x22\x5e\x89\x94\xf0\x20\xa4\xf2\x3c\xf9\x90\x6b\xb6\xf0\xcd\xd6\xc4\x22\xcb\x7c\xcf\x5b\x16\x2a\xae\x5f\x06\x21\x76\x1e\xb0\xdb\x41\x2e\x21\x54\x82\x41\x34\x35\x37\xac\x93\x22\xb6\x52\xab\xcb\x42\x66\x09\x02\x45\xb0\x82\x53\xb2\x3f\xcf\xe0\x57\x52\x25\xba\x32\x7e\x88\xd1\x7e\xef\x01\xc0\x78\x8c\x94\x45\x4c\xcb\x22\xcb\xb6\xa0\x8d\xb4\xa8\xee\x49\x81\x29\x26\x59\x4a\x95\xc2\xc8\x54\x89\xcc\xc0\xde\x0b\x8b\x4a\x17\x59\x82\xc2\x14\xc2\xa5\xe7\x2c\x95\x85\xb1\x22\x5e\xc1\x3a\x14\x53\x63\x1a\x99\x1a\xbc\x9a\xe0\x41\xac\x28\x88\xef\x85\x82\x36\xd1\xac\x86\x19\xe2\xfb\xb0\xad\xdb\xe0\x46\x1f\xb4\x95\xcb\x6d\xe0\xf6\x0c\xd1\xb2\x8c\x66\xd3\xb7\xbf\xdc\x4d\x6f\x7b\x81\xe9\xf5\x75\x6f\x7d\xfb\xf1\xe2\xa6\x17\xb8\xb8\xfc\xd8\xdf\x31\xbb\x7d\xf7\xe6\xfa\x28\xf4\xdb\x2c\xec\x7a\xfc\xd6\xd5\xbb\x52\xa9\x86\xf3\xac\xb5\xcb\x7d\x96\x9a\xbf\x3e\x03\x73\x4c\xf0\xe3\xa8\x56\xed\x6b\x4c\x9b\xe8\x6a\x23\x6d\xf0\x22\x6c\x43\x8d\x5b\xfb\x20\xac\x1d\x1f\x81\x54\x82\xda\xc2\xc6\xfe\xc7\xac\x3f\xb0\xd8\x39\x01\x53\x30\x41\xa8\x2d\x72\xa1\x64\x6c\x20\x98\x60\x2a\x91\x65\xba\xa2\x04\x56\x23\x67\x2a\xe9\x31\x43\x13\x5a\x12\x1f\x93\x90\x4b\xb0\x73\x99\x29\xd6\x25\x71\x10\xfe\x00\xc6\x77\x13\x28\x99\x1d\x90\x7b\x3a\x91\x52\x30\xaa\x14\x66\xab\xe2\xe8\x57\x21\xed\x5b\xd6\x45\xde\x26\xb1\x50\x29\x61\x30\x1f\x62\x90\xb3\x74\x55\x07\xd1\x9d\x92\xeb\x1b\x96\x9a\xa5\x95\x64\x3a\x31\x7a\xb9\xe5\x83\x4b\x0d\xa4\x4a\x68\x83\x41\x34\xd3\x6c\x29\xf9\xf4\xde\xd4\x28\x61\xb3\xa5\x4a\xa3\x8b\x24\x09\xea\x63\x79\xec\xd4\xbf\x6b\x7b\x0a\x75\xff\x46\xdf\xa7\x2a\xfc\x88\xc6\x9d\xca\x9d\xce\x3d\xa5\x0f\x1c\xad\xd2\xe8\xb5\x56\xd4\xe6\x88\xdd\xce\x49\x16\x4d\x5f\x63\xbf\x77\x75\x3f\x50\x75\x18\x6a\xd3\xdc\x65\xd3\xcb\x9c\xf4\x3b\x62\xb2\x05\x2b\xef\xaf\x2e\x88\x6b\x16\xbd\x4d\x51\xbb\x78\x53\xa8\x5a\xd5\x77\xb4\x85\xdf\xdc\x75\x73\x61\x0c\x59\xe3\xf7\x2a\x3a\x8c\x23\xe6\x7d\xbc\xab\xe8\x5a\xa7\x29\x71\x74\xc5\xac\x79\x19\xf8\xf5\x37\x1a\x48\x77\x8d\x35\xa8\xf5\x4f\xef\xd3\x7b\x3c\x33\xaf\xf0\xac\xf4\x87\xf0\x0f\x51\xfc\xa1\x2b\x14\xfe\x13\x91\xff\xc0\xc3\x58\xa1\x12\xc1\xc9\x3c\x93\x0b\x16\xbc\x3d\x11\x23\xf5\x07\xc5\x35\xa3\x0e\x1f\x2d\xfe\x59\xb8\xe5\x4c\x99\x16\xc9\x69\xb8\xb8\x86\x5b\x40\x47\xe8\x1c\xa6\x28\x61\x65\x49\xa7\x3e\x5c\x0d\xea\xd9\x0e\x56\xcc\x32\xb7\xa7\xe6\xd0\xa0\x9e\xe5\x10\xd1\x86\xe2\xc2\x9e\xc8\x85\x06\xcc\x31\xf8\x7f\x6d\x77\xa3\xa8\xbe\x1f\x47\xdd\x4c\x70\x13\xe8\xf8\xc5\xbe\xfd\xf3\x95\x06\x2b\x70\xa1\x68\x88\x05\x3e\x7f\x71\x4f\x21\x8c\x65\xd7\x82\xeb\xdc\x29\x58\xcf\xa8\x66\x12\x2d\x5a\x3a\x8b\xcf\xf2\x0b\x7e\x9f\x60\x55\xaf\x56\xee\xd1\x85\xbc\xa6\x8b\xb5\xdb\xd0\x80\x04\x2f\x36\x2f\x5f\xba\xd2\x66\x88\x79\x1b\x8e\xb5\x2a\xa3\x3b\xb5\x2e\xb4\xa5\x60\x8d\xe7\x5d\xea\x22\xc4\x73\xac\x5d\x72\xc3\x0a\xc6\x75\x39\x1e\x63\x34\x1a\xe1\x56\xa8\x34\xa3\x04\x3f\x09\xc9\x06\x97\x94\xe9\xca\x1b\x8f\x3d\xcf\xfb\x33\x00\x00\xff\xff\x6c\x62\x39\x20\x63\x0a\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 2659, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\xf0\x13\x00\x00\xff\xff\xb6\x85\x38\x24\xf1\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 241, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(436), modTime: time.Unix(1707637097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xff\x6f\xdb\xb8\x15\xff\x39\xfe\x2b\xde\xb4\x64\x90\x0b\x45\x6e\x0f\xc3\x86\x65\xcb\x80\x34\xf6\xf5\x72\x4d\x93\x22\xce\xe5\x30\xe4\x82\x94\x96\x68\x85\x8d\x4c\xe9\x48\xda\x89\x1b\xf8\x7f\x1f\x1e\x49\x49\xa4\x2c\x27\xee\xf5\xb0\x61\xc0\x7e\x28\xea\x48\x8f\xef\xfb\xfb\xf0\xf1\x51\x25\x49\xee\x49\x46\x61\x46\x18\xef\xf5\xd8\xac\x2c\x84\x82\xb0\x07\x10\x4c\x96\x8a\xca\xa0\xb7\x13\x24\xc5\xac\x14\x54\xca\x41\xf6\x85\x95\x01\xbe\x4a\xc4\xb2\x54\xc5\x80\xe0\xfb\xe6\xcf\x84\x95\x77\x54\xe0\x0a\xca\x93\x22\x65\x3c\x1b\x4c\x88\xa4\x7f\xf9\xb3\x26\x9a\xce\x14\xbe\x62\x45\xd0\xc3\x3f\x33\xa6\xee\xe6\x93\x38\x29\x66\x83\x8f\x44\x26\x24\xdf\x7f\xfd\xf8\xb7\xd7\x83\x4c\x26\x82\x95\x6a\x40\x79\xc6\x38\x0d\x5a\x94\xa2\x98\x50\xa1\xee\x05\x9b\x51\x3e\x28\x94\x2a\x90\xe0\xe9\x09\xd8\x14\x76\xe3\x1f\x88\x1c\xd2\xc9\x3c\xcb\x18\xcf\x46\x9c\x4c\x72\x9a\xc2\xfe\x6a\xd5\x03\x78\x59\x5c\xaa\x17\xa2\xf2\xc8\x6f\x1f\x28\x4f\x41\x2f\x75\x98\x9f\x16\xbf\x89\x75\x5e\x20\xe3\x81\x54\x84\xa7\x44\xa4\x2d\x09\x3d\x80\xc1\x00\x4e\xb4\xdb\x19\xcf\x60\x46\xe4\xbd\x34\x72\x05\xe1\x19\x85\x5d\x56\x46\xb0\x3b\x63\x70\x70\x08\xbb\xf1\x29\xe3\xf7\x54\xc4\x1f\x88\xbc\xa7\xa9\x59\x25\xc1\x2a\xf2\xf4\x84\x74\xf1\x19\x7d\x38\xca\x19\xc1\xc7\x10\xe0\x33\x56\xc2\x6a\x65\x1d\x65\xa5\xf6\x7b\xbd\x05\x11\x3a\xcc\xa8\x8b\x95\x74\x1b\xc1\x2e\x9d\x4d\x68\x6a\x64\x8d\xf0\x67\xcd\x7d\x30\xd0\x02\xf4\xfb\xf8\x64\x88\xdc\xef\x8a\x3c\x95\xa0\xee\x28\xa4\x44\x11\x98\x16\x02\xf4\xeb\x94\xa6\x30\x65\x39\x75\x16\x9c\x0b\x96\x9d\x91\x19\x75\x75\x75\x59\x1d\x1a\x55\xcd\xa3\x21\x72\x43\x95\x7d\x57\xf5\x7b\x3d\xab\x84\x5d\xf4\x20\x48\x69\xe4\x67\x94\x53\xc9\x24\x5c\x7d\xd0\x5a\x68\x9a\x4a\x9c\x5a\x96\xd4\x5d\x25\x95\x98\x27\x0a\x9e\x7a\x00\x23\x78\x65\xf2\x2c\x1e\xe9\xff\x7a\x00\xef\xe1\xfa\x06\x13\x7f\xcb\xbc\x1a\xc2\xab\x2a\x75\xe2\xa1\xfd\xe1\x6b\xbd\xd2\x5a\x9f\xd1\x07\x47\x85\x44\x50\xa2\xa8\xaf\xba\x98\x73\xc5\x66\x54\xeb\x6f\x32\xc7\x37\x63\x3a\xe7\x89\xcf\x26\xec\xc3\x2b\x87\x29\x1a\xa4\x28\x86\xce\xda\x74\x46\x1f\xc2\xc0\xe5\x11\x44\xc6\xcb\x66\x41\x10\x19\x01\xef\xa8\xba\x64\x33\x5a\xcc\x15\xac\x56\x11\x04\xa3\x47\x9a\xcc\x15\x0d\xfa\x5b\x65\x3f\xc9\x51\x62\x95\xdc\x28\x73\x6c\x7f\x9f\xea\xbc\x0f\x39\xcb\x23\x08\x6c\x39\x57\x0a\x34\x0a\x4d\x49\x2e\xa9\xfd\xaf\xaf\x39\x2a\x1a\x8f\xa9\xb2\xab\x49\xde\x7f\xa6\x22\xd7\xc2\x62\x95\x4a\xb5\x1b\xea\xc0\xa0\x23\x14\xed\x7b\x15\x00\x50\x20\xcd\x9f\x1a\x7f\x3c\xe9\xa5\xa3\x03\x50\x34\xaa\x72\xf4\xc5\xf8\x03\x0c\x0f\x20\xad\x17\x38\x6a\xe2\x3f\x41\xd5\x5c\x70\x28\x6c\x12\x68\x59\xdf\xcf\x79\xa2\x58\xc1\xdf\xd3\x25\x04\x06\x6e\x6f\x89\x94\x54\xc9\x00\xa3\xc8\x6c\x4d\x9b\x47\xc0\xb8\x2a\xbe\x3e\x4d\xc2\xc2\xcd\x8c\xfe\x36\x82\xc3\x3e\x50\x21\xb0\x76\x3c\xf0\xa1\x2c\xed\x04\x85\xfd\x16\x2a\xb0\xd4\x54\xf1\xe6\x8a\x2f\xe2\x51\x6c\x01\xeb\x3a\x68\xd6\x04\x37\x70\x08\xa8\x74\xd8\xb7\x95\x07\x4f\xd6\xb3\x83\x01\xfc\xc4\x71\x7b\xa2\x42\x97\x7a\x89\xff\x33\x75\x07\x49\xc1\xa5\x82\x94\x26\x39\x11\x34\x05\x32\x29\x16\xd4\xae\xb1\x1e\x6f\x8c\x1f\x86\x2d\xa8\x89\xda\xd8\x73\x3e\x7c\x1f\xf6\x4d\xea\xad\x9a\x14\x31\x06\x5a\x76\x9c\xe5\x1b\x43\x58\x0a\x9a\x17\x24\xf5\x82\x87\x01\xab\x02\x65\xdf\x43\xce\x26\x82\x88\xe5\xb7\x06\xce\x11\xe7\x85\xac\x4a\xb5\x78\x14\x9f\x16\x24\x1d\x6b\x09\x61\x45\x1e\x67\x32\x88\xfc\x10\xdc\xde\x7e\xbc\x18\x9d\x9e\x1f\x0d\x83\x1b\x34\xff\x85\x0c\x35\x1a\x6b\x23\x91\x9f\x31\xb1\xc3\x8c\xf5\x84\xbd\xfa\xf0\x95\x39\xd9\x88\xda\xc6\xc0\x16\x9c\xb4\x4c\x1c\x9d\x5d\x5e\xfc\xeb\xe3\xf9\xc9\xd9\xe5\xf3\x56\x52\x8b\x79\x68\x81\xfd\xbd\xb6\xb1\x10\xa5\x9f\x50\xae\xc4\x12\xca\x82\x71\x05\x61\x4a\xa7\x8c\xd3\x14\x26\x4b\x58\x50\x21\x59\xc1\x23\x98\xcb\x39\xc9\xf3\x25\x0c\x69\x99\x17\x4b\x94\xba\xa5\xfd\x8e\x12\xed\x6a\x7c\x11\x87\x8a\x78\x18\x9f\xf0\xcf\x34\x51\x9a\xe4\xb8\xe0\xb2\xc8\x69\xb8\x06\x9e\xe8\x1f\xb3\xf6\x48\x97\xbe\xa6\xb8\x8d\x50\x1a\xd6\x37\xbe\x3e\x26\x79\x5e\xe9\xf5\x33\x53\x77\x76\x73\x08\x03\x63\x90\xde\x17\xd8\x54\xaf\xf8\xc3\x21\x96\x86\x2d\xd8\x92\x70\x96\x84\x54\x88\xbe\x8f\x7e\x54\x88\x97\xb2\x8b\x13\xc5\x16\xc6\xfb\x4c\x1b\x61\xbb\x8a\x25\x27\x33\x96\x68\x6f\xe6\xd8\xf8\xa4\x60\x28\x35\x60\x20\x93\x0e\x80\xb4\x2d\xc0\xb7\x63\x63\xa3\x94\x17\x0d\xec\x9b\xd0\x76\xfd\xa4\x07\xfa\xb7\x76\x83\x6d\xe5\xf6\xf7\xe1\xed\xe8\xdd\xc9\x19\x9c\x1d\x5d\x9e\x5c\x8d\xe0\xe3\xd1\xf1\xfb\xa3\x77\x23\x38\xf9\xf0\xf1\xfc\xe2\x72\xec\xa1\x2b\x97\x11\xec\x96\xf7\x99\x81\xd6\x77\xc5\x47\xd3\x8b\xbf\x5d\xa2\xc6\xb2\x24\x09\x75\x81\xb6\x69\x12\x51\xe7\xf2\x3e\xb3\x99\xfe\x91\xa8\x3b\x74\xdd\x9c\xa7\x54\x00\xaf\x97\x56\x54\xa6\x59\xac\x0a\x34\x2c\x04\xcb\x18\xd7\x4e\x7d\x20\x52\x53\x71\xec\xf2\x0c\x04\xde\xf2\xb2\x7b\x1d\x6e\x96\x55\x63\xa1\x3d\x63\x95\xad\xd0\xba\xd1\xe5\xc0\x6c\xf2\x6b\x0a\x06\x91\x25\x45\x96\x0e\x51\x5d\xbd\xf6\xf5\x78\x39\x9b\x14\xf9\x25\x26\xe9\x01\xcc\x48\x79\x2d\x95\x60\x3c\xbb\x79\xe5\x89\xc7\x90\x3d\xad\xaa\x35\x97\xcb\x92\xca\x67\xa8\xf1\x7d\x43\x8d\xe5\xa1\x9e\x23\xd7\x04\x0d\xfd\x15\x11\xcf\x51\x5f\x11\x51\xd1\xd6\xdd\xad\x8d\xf0\x94\xa5\x8f\x11\xec\x4e\x75\x84\xd1\xd8\xf1\x3c\x49\xa8\x94\xd3\x79\x9e\x2f\x75\x33\x9f\xa2\x21\xd2\x69\x28\x06\x03\x38\x4a\xf1\xf0\x54\x67\xb9\x41\x1b\x2a\x74\x62\xb7\x2a\x00\x5a\x5e\x8c\xf1\xef\x69\x9d\xd0\x18\x39\x55\x80\xd4\x2e\x05\x85\x3e\xb5\x62\x6e\xf9\xb4\x33\xd0\x7a\x3d\x4b\x1f\x3b\x63\xae\x9d\x6e\x19\x78\x71\xf4\x24\xd6\x91\x04\x18\xb3\x8c\x13\x35\x17\x0d\x5d\xfd\xc4\x27\xc4\xe5\x07\x50\xc4\x4e\x3f\xa6\xc9\xcd\x9e\x6d\xc9\x56\xb5\xee\xdd\x49\x1a\x3b\xa9\x73\xdd\xa1\x17\xf6\x1a\x5b\xd8\x5d\xc5\xb0\xe9\x03\xdc\x90\xe2\x29\x49\xd5\xf1\x7c\x57\xe8\xd4\xf3\xe3\x37\xd4\xad\x09\x86\x90\x80\x3e\x7e\x10\x7d\x20\xab\x8e\x26\xed\x70\xa9\xd8\x6d\x94\xd0\x3c\xb5\x51\x45\x15\x23\x46\x75\xc5\x46\xa7\x78\x57\x6c\xd4\x5a\x85\x01\x7c\x4f\x12\x55\x88\xe5\xba\xc7\x2b\xfe\x0e\x29\xa3\x79\xfa\x5c\xfa\x6b\x82\xa7\xed\x83\xa4\x1d\x76\xdd\x52\xcd\x84\xe6\x65\xbb\x9f\x8f\x4d\x62\xca\x2d\x71\xc2\x63\x6a\xdd\x89\xcf\x2d\x4f\x36\x4a\x49\x36\x7a\xd7\x20\x42\x97\x7b\x93\x0e\xf7\x5e\x91\x7c\x4e\x0f\xba\x11\x38\xf6\x16\x6d\xed\x35\x63\x87\x71\x5b\x62\xf2\xd4\x3a\xed\x65\x73\x9e\x77\xda\xc2\x38\x6d\x41\x6a\xaf\x5d\x91\x9c\xa5\x08\x7a\x9e\xdb\x16\x1b\xe5\x2c\xc8\x46\xbf\x21\x36\x76\x79\x6d\x41\x3a\xdc\xe6\xa0\xc5\x27\x4b\xe4\xc2\xc5\xa7\xaf\x70\x70\xc3\x7f\x6b\x0f\xa3\xc1\xd7\x6d\xe5\x8c\x8b\xb7\x30\xbd\xed\xe3\x7a\xd7\xd6\x0d\x0d\x62\x81\x45\xee\x6a\xe0\xd6\xd5\x29\xe3\x1a\xd3\x50\x34\x8d\xac\xb7\xdb\x9a\x86\x57\xef\xd7\x41\xb4\xd1\x14\xb3\x95\x77\x35\x69\x5e\x57\x66\xbc\x52\x29\xba\xbf\xdf\x6b\x1f\x7f\x4c\x3b\x33\x3a\x1b\x6e\x6e\x66\xb6\x6f\xf2\xaa\x19\xc1\xad\x3d\x09\x6d\xd3\xee\x55\x6b\x9a\xd3\xd3\x7f\xa0\xf1\xeb\x52\x74\xcb\x16\x10\x80\xab\x12\x8b\xe0\xba\x85\x91\x55\xb3\xb4\xfa\xe6\x2e\xd1\x76\xfe\xf5\x94\x85\x4d\x64\x77\x93\x58\x51\xc0\xa9\xf5\x9d\xd5\xe1\xa0\x69\xf9\xfe\x1b\x1d\x9f\xcd\xdd\xdf\xdc\xeb\xd9\x84\xfd\x7f\x8b\xf5\xbf\xdd\x62\x75\x6d\x49\x58\x3b\x87\x40\xca\x92\xf2\x34\xe4\xaa\x7c\x1e\xe0\x7c\xac\xf5\x90\x76\x0d\x36\xba\xb1\xb6\x8d\xb4\x4e\x4d\xe1\x2a\x54\x61\xd3\x61\xd7\x43\xd1\xf5\x49\x91\xdf\x2d\x6e\x1a\x9f\xad\x8f\xd4\xcf\x87\xef\x2d\x27\x0b\x89\x54\x5f\xad\xa0\x6f\xef\xa9\x99\x1d\xe1\xe3\xf6\xf4\x5c\x8f\xf1\x7a\xa0\x33\xb6\x73\xbc\xe5\x8f\xd6\x9c\x21\x99\x47\x78\x31\xec\xd9\xfa\xea\xd2\xec\x62\x08\x49\xc1\x15\x61\xcf\xeb\x46\xb9\x7e\x4c\xd3\x8d\x5a\x22\x7c\x76\x71\x3f\xb4\x5a\x3e\xd5\xc3\xd4\xea\x06\x44\x17\xf8\x44\x7b\xd0\x2c\x1a\xf1\x4a\x36\x02\x77\x53\xd8\xb8\x88\x4d\x61\x56\xa4\x7a\x15\xfc\xd5\x79\xa7\x33\xa6\x14\x8c\xab\x29\x04\xbf\xf0\x5f\xf4\x88\xc9\x59\xe7\x66\xa2\x47\xfb\xfa\x71\xef\x31\x82\x00\x35\xd8\xf7\xf7\x79\x3b\xe8\x75\x33\xd1\xbb\xa1\x18\x02\xab\x7d\x55\xf8\x78\xe3\x5d\x96\xd8\x61\xef\xb3\xdb\x97\x3b\xd2\x94\x60\x60\x32\x82\x7b\xeb\x33\x2f\xc2\x93\x7a\x9e\x43\xa8\x8c\xcf\xe8\xc3\xb1\xbe\x98\x0b\xef\x5f\xc8\x66\xeb\xfe\x6a\x7a\x9d\x4e\xde\x20\x0f\x4e\x1f\x42\x7d\x15\x18\xbf\x9d\x4f\xa7\x54\x8f\x77\xd2\xc9\x77\xdd\xaf\x76\xa4\xd0\xcd\xb7\x79\x7a\x46\x1f\x2e\x28\x49\xa9\x08\x0d\xeb\x50\xea\x41\x2b\x26\x00\x5b\xc0\x35\x6a\xf7\x36\x2f\x92\xfb\x31\xfb\x42\xab\x5b\x17\xa9\x04\x25\x33\xe4\x61\xae\x13\x91\xc9\xf9\xf7\x6f\xc3\x49\x04\x6c\x71\x7d\x70\xd3\xef\xed\x68\x6f\x52\x6d\xa0\xb9\x5f\x44\x9a\xa1\x79\x18\xda\x27\x63\x95\x8e\xec\x25\x64\x04\x52\x24\x28\x97\xf2\xc4\xa8\xa3\x51\xd7\xb2\x1f\x6b\x79\xe6\xf9\xd3\xf8\xc0\xca\x8f\xe0\xe2\x00\xac\x9c\x95\xf1\x5a\x33\x25\x63\x45\x7c\x5c\x94\xcb\x30\x9d\xbc\x89\x1a\xa6\xfd\xbf\x6f\xe7\xd8\x9d\xec\x8b\xa8\x59\x65\x5f\x58\xe9\xb8\x29\x9d\xbc\xe9\xf7\x76\xda\x21\xda\xd9\x69\xf3\xd9\x59\xf5\x76\xac\x3e\xae\x3a\xdf\x45\x90\x7d\x11\x5b\x73\xc8\xbe\x88\xf8\x38\x2f\x24\x0d\xfb\xbd\x8a\x20\x9d\x7c\x17\xbf\xc5\xe0\x85\xd5\xb4\xb4\x39\xcc\x0e\x9d\x06\xcd\x6c\xac\x50\x43\xff\xcf\x66\x40\x2f\x5b\xd0\x37\xf5\xae\x2d\x37\xed\xcc\x6b\x85\xe3\x6c\x4c\x55\x09\xe9\x8e\x50\xf8\x05\x64\xc8\xea\xb9\xd9\xe6\x0d\xfa\x99\x0e\xb0\x2d\x2f\x44\xfb\xa0\x50\xaa\xa8\x19\x1c\x93\x3c\xef\x9b\x47\xfa\xdc\xa1\x83\x8b\x3d\x84\xc8\xe6\x33\xca\x15\x8c\x09\x67\x6a\x09\xc7\x77\x34\xd1\x97\xb7\x6c\x0a\x39\xe5\x9a\x53\x5c\x11\x9d\x32\xa9\xfa\xf0\x4f\x14\x9a\x53\x6e\xf4\x3e\x12\x99\xac\xae\xee\xbc\x09\xf7\x05\x61\x92\x86\x01\xb1\x6b\x83\x08\x02\x55\x14\x30\x23\x7c\x09\xd5\x43\x09\x25\xe2\x46\x8a\xcd\x47\xed\x95\x3d\x59\xdd\xb1\xf9\xdb\x72\x35\x93\xdd\xac\xd9\x3f\xbe\x49\xb3\x29\x7d\xf8\x16\xc5\xbc\x7e\x97\x18\xbc\x37\xc7\xd1\x5a\x19\xa7\xc7\x35\x8d\x52\x93\x7b\x75\x1c\xfe\x88\xfc\x89\x33\xc4\x41\xa4\x21\xce\x43\x1d\x72\x12\x8f\x1e\xd5\x98\x65\x15\x91\x70\x29\xea\xca\xf4\x5c\x14\x3a\x14\xfd\x78\xf4\x88\xdd\x42\xb8\xc5\x29\xcb\xf1\xd8\x67\x49\xf5\x32\x74\x43\x52\xcc\xf3\x14\x78\xa1\xc0\x3c\xab\x5d\x07\x7b\x29\x14\xd3\x96\xd7\x3c\xed\x36\xb8\xb0\x6a\xdc\xe4\x03\x53\xc9\x1d\x2c\xd0\x02\xcf\xae\x38\x54\xcb\x92\xf6\xe1\xc9\xb9\xda\xa4\xbf\x3a\xce\x08\xae\x6f\x74\x07\x3c\x25\x09\x7d\x5a\x39\x7b\x63\x42\x24\x85\xeb\x1b\xb3\xe3\x1c\xd4\x9b\x29\x9b\x4a\x73\xd0\x71\x56\x3d\x35\x7b\x2d\x96\xe7\x6d\x04\x8f\x46\x11\x8c\xeb\x02\x9a\xb6\xd6\x2c\xaf\x7b\x3d\x36\x95\x11\x3c\xf6\xeb\xd7\x0d\x1b\x2f\x78\x87\xb8\x6a\x6d\xff\xad\x2f\x48\x48\x7c\x46\x69\x2a\x3f\x90\xb2\x44\xb4\xf2\x0d\x30\x81\xc7\x77\x34\xbd\x5c\x96\xb4\xfa\x44\xe2\x60\x93\xa8\x56\xa6\x84\x8b\x7e\x87\x64\x87\x75\x4d\x59\x71\x6c\xf1\x6b\x45\xa3\xb5\xa8\xef\x1b\xf2\x76\xce\x72\x75\xc2\x2f\x05\xe1\x32\x27\x18\xe8\x0b\xfa\xeb\x9c\x89\xe6\x8a\xdb\x93\x6d\xc9\x7f\x1c\xa3\x65\xdf\x6c\x54\x4a\xa7\x64\x9e\xab\x83\x8d\xa9\xac\x47\x9a\x49\xc1\xed\x95\x17\x66\x74\x9d\xc0\xfa\xdd\x8c\xc9\x19\xc1\x3c\xdc\xc7\x04\xa7\x09\x76\x83\x7b\x32\x82\xac\x50\xb0\x77\x59\x01\x81\xa3\x48\x10\xc1\x62\xed\x0a\x76\xd5\xc2\x05\x81\x66\x44\xb0\x2b\x6a\x60\xb8\xb0\xad\xf2\x33\xd8\x60\x48\x0c\x32\x88\x16\x32\x08\xe7\xa1\x76\x8d\xf0\x90\xc1\x3b\x9d\xe8\xd7\x54\x9d\x52\x8e\xd2\x6b\x9c\xac\x34\x70\xbe\x4c\xc8\x54\x4d\xf9\xda\xf9\x78\x06\x37\x11\xbd\x91\xb5\x4e\x97\xf5\xe7\x30\xd3\xf8\x1d\xe5\x54\x10\x45\x0d\xd3\xb1\x2e\x38\x08\x44\xd0\xc4\xce\xdd\xec\xd6\x67\x5e\x1e\x2c\x84\x3e\xcf\x23\x91\x55\x0c\x49\xd0\x4a\x38\xc4\x01\xab\xf1\x1b\x70\x0f\xc9\x63\xc6\xb3\x9c\x56\x19\x80\xdd\x3f\x7d\x54\xb0\x0f\x44\x29\x3a\x2b\x15\x02\xbc\x7d\xa7\xee\x88\xfe\xd3\xce\xb0\x74\xd6\x5c\x91\xdc\x47\xd3\x73\xdc\x41\x2f\x0b\xbd\x87\x86\xe2\x75\x55\xef\xdd\x08\xda\x95\x78\xe6\x89\x41\xd0\x2a\xfb\x60\x4a\x58\x4e\x53\x0d\x38\x76\xc5\x6b\xd0\x60\x77\xb8\x77\xd9\x87\x7d\xd8\x5b\x04\x11\x88\xd7\x5a\x95\x7e\xeb\x94\x6b\x17\x18\x65\xeb\x52\xc8\x25\xf5\xdc\x70\x79\xc7\x64\x83\xc9\x77\x44\xc2\x6c\x9e\x2b\x56\xd6\xae\x91\xb0\x6f\x27\x59\xe8\x60\x7d\xd8\x24\xf0\xe3\x18\x88\x10\xc4\xde\xf8\x77\x7a\x32\x29\x66\x25\x51\x6c\xc2\x72\xa6\x96\x56\xde\x67\x79\x3e\xf9\xdc\xe1\xb7\xf3\x09\xf2\x0f\x3f\x5d\xdf\x7c\xfa\x0d\x8e\x33\x1f\x23\xf8\x7b\x8f\xf9\x0a\xa9\xb1\x85\x48\xc9\x32\xae\xab\xd8\x7c\x23\x35\x17\xb4\xf2\x9f\xe7\xbb\xe6\x88\xe4\x54\x66\x04\xbb\xb7\x1b\x0b\xd3\x3a\xd2\x16\xa3\x69\xa2\xd6\x4a\x12\xea\xe1\xa7\xf6\x41\x3c\xa6\xf6\x7e\xdf\x12\x61\x18\x9d\x3f\xfb\xce\x56\xd4\xed\x87\x6f\x48\xa1\xbd\x74\x3d\x87\x1c\xd9\xbe\x26\x9e\x7b\x9a\xe4\xf2\x51\xd5\x75\x40\x35\x89\xc0\xc2\x4c\xa1\xd0\x91\xf5\x33\xd2\x78\xc0\x54\x4a\x7f\x7d\x56\xd2\xca\xd2\xce\x1c\xe5\x55\x71\xca\x48\xa7\x91\x96\x5a\x53\x10\x9e\x56\xb2\xe6\xdc\x7e\xc6\x10\xbb\x58\xf4\xbb\xe2\x4c\x15\x07\x4c\xe4\x9f\x2a\x71\x8d\x75\x8e\x6d\x66\x78\x52\xc1\xff\x57\x5f\x95\x37\x0b\x14\xdf\x78\x4f\xb7\x76\xd4\xa8\x2f\xd5\xec\x37\x45\x12\x08\x07\xa2\xcf\x2a\x6c\x92\xd7\x90\xad\xf7\x36\x1b\xb7\x42\x6c\xbe\xce\xdb\xf6\xc4\x51\x89\xdd\xf6\xc8\xb1\x30\x1f\xdb\xe1\xa9\x7b\xf3\xc5\x87\x96\xde\xef\x6d\x81\xc0\x0b\xf3\x71\xdd\x33\x03\x81\xdf\x05\x7a\x17\x56\x89\xd6\x67\x21\x16\x73\x9b\x78\xdb\xf0\x55\x3f\x31\xa7\x09\x82\x66\x0a\x3f\x10\x26\x24\x4c\x68\x5e\x3c\xf4\xf4\xec\x7c\xff\xdf\x01\x00\x00\xff\xff\x6a\xaf\xf6\x42\xb5\x2c\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 11445, mode: os.FileMode(436), modTime: time.Unix(1707990041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs":        debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved":      hard_reserved,
	"obfstring.go.tmpl":  obfstringGoTmpl,
	"preload.gs":         preloadGs,
	"soft_reserved":      soft_reserved,
	"vm_file.go.tmpl":    vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs":        &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved":      &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl":  &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs":         &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved":      &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl":    &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
